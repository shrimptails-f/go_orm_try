// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: postWithNestedReplies.sql

package model

import (
	"context"
	"database/sql"
)

const getPostWithNestedReplies = `-- name: GetPostWithNestedReplies :many
SELECT 
  u.id AS user_id, u.user_name as user_name,
  p.id AS post_id, p.title AS post_title,
  c.id AS comment_id, c.content AS comment_content,
  r.id AS reply_id, r.content AS reply_content
FROM users u
JOIN posts p ON p.user_id = u.id
JOIN comments c ON c.post_id = p.id
LEFT JOIN replies r ON r.comment_id = c.id
`

type GetPostWithNestedRepliesRow struct {
	UserID         uint64
	UserName       string
	PostID         uint64
	PostTitle      sql.NullString
	CommentID      uint64
	CommentContent sql.NullString
	ReplyID        sql.NullInt64
	ReplyContent   sql.NullString
}

func (q *Queries) GetPostWithNestedReplies(ctx context.Context) ([]GetPostWithNestedRepliesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostWithNestedReplies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostWithNestedRepliesRow
	for rows.Next() {
		var i GetPostWithNestedRepliesRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PostID,
			&i.PostTitle,
			&i.CommentID,
			&i.CommentContent,
			&i.ReplyID,
			&i.ReplyContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
