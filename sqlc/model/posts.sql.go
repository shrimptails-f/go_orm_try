// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package model

import (
	"context"
	"database/sql"
)

const getUserPostsWithComments = `-- name: GetUserPostsWithComments :many
SELECT
  users.id AS user_id,
  users.user_name,
  posts.id AS post_id,
  posts.title,
  comments.id AS comment_id,
  comments.content
FROM users
JOIN posts ON users.id = posts.user_id
LEFT JOIN comments ON posts.id = comments.post_id
WHERE users.id = $1
ORDER BY posts.id, comments.id
`

type GetUserPostsWithCommentsRow struct {
	UserID    uint64
	UserName  string
	PostID    uint64
	Title     sql.NullString
	CommentID sql.NullInt64
	Content   sql.NullString
}

func (q *Queries) GetUserPostsWithComments(ctx context.Context) ([]GetUserPostsWithCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPostsWithComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsWithCommentsRow
	for rows.Next() {
		var i GetUserPostsWithCommentsRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PostID,
			&i.Title,
			&i.CommentID,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
