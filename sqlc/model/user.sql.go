// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package model

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password, email) VALUES ($1, $2, $3)
`

func (q *Queries) CreateUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUser)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUser)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser)
	var i User
	err := row.Scan(&i.ID, &i.UserName)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_name FROM users ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $2, password = $3, email = $4 WHERE id = $1
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUser)
	return err
}
